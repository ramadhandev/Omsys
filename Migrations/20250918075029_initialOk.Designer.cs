// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OMSys.Data;

#nullable disable

namespace OMSys.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250918075029_initialOk")]
    partial class initialOk
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OMSys.Models.Component", b =>
                {
                    b.Property<int>("ComponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComponentId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("ComponentId");

                    b.HasIndex("UnitId");

                    b.ToTable("Components");
                });

            modelBuilder.Entity("OMSys.Models.DiagnosisStep", b =>
                {
                    b.Property<int>("StepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StepId"));

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StepOrder")
                        .HasColumnType("int");

                    b.Property<int?>("SymptomId")
                        .HasColumnType("int");

                    b.HasKey("StepId");

                    b.HasIndex("SymptomId");

                    b.ToTable("DiagnosisSteps");
                });

            modelBuilder.Entity("OMSys.Models.Solution", b =>
                {
                    b.Property<int>("SolutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SolutionId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpareParts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SymptomId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SolutionId");

                    b.HasIndex("SymptomId");

                    b.ToTable("Solutions");
                });

            modelBuilder.Entity("OMSys.Models.StepResult", b =>
                {
                    b.Property<int>("ResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResultId"));

                    b.Property<int?>("NextStepId")
                        .HasColumnType("int");

                    b.Property<string>("ResultOption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SolutionId")
                        .HasColumnType("int");

                    b.Property<int?>("StepId")
                        .HasColumnType("int");

                    b.HasKey("ResultId");

                    b.HasIndex("NextStepId");

                    b.HasIndex("SolutionId");

                    b.HasIndex("StepId");

                    b.ToTable("StepResults");
                });

            modelBuilder.Entity("OMSys.Models.StepView", b =>
                {
                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Solution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StepNumber")
                        .HasColumnType("int");

                    b.ToTable("StepView");
                });

            modelBuilder.Entity("OMSys.Models.Symptom", b =>
                {
                    b.Property<int>("SymptomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SymptomId"));

                    b.Property<int>("ComponentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SymptomCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SymptomName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SymptomId");

                    b.HasIndex("ComponentId");

                    b.ToTable("Symptoms");
                });

            modelBuilder.Entity("OMSys.Models.TroubleshootingView", b =>
                {
                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComponentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SymptomDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("TroubleshootingViews");
                });

            modelBuilder.Entity("OMSys.Models.Unit", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitId"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UnitId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("OMSys.Models.Component", b =>
                {
                    b.HasOne("OMSys.Models.Unit", "Unit")
                        .WithMany("Components")
                        .HasForeignKey("UnitId");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("OMSys.Models.DiagnosisStep", b =>
                {
                    b.HasOne("OMSys.Models.Symptom", "Symptom")
                        .WithMany("DiagnosisSteps")
                        .HasForeignKey("SymptomId");

                    b.Navigation("Symptom");
                });

            modelBuilder.Entity("OMSys.Models.Solution", b =>
                {
                    b.HasOne("OMSys.Models.Symptom", "Symptom")
                        .WithMany("Solutions")
                        .HasForeignKey("SymptomId");

                    b.Navigation("Symptom");
                });

            modelBuilder.Entity("OMSys.Models.StepResult", b =>
                {
                    b.HasOne("OMSys.Models.DiagnosisStep", "NextStep")
                        .WithMany()
                        .HasForeignKey("NextStepId");

                    b.HasOne("OMSys.Models.Solution", "Solution")
                        .WithMany("StepResults")
                        .HasForeignKey("SolutionId");

                    b.HasOne("OMSys.Models.DiagnosisStep", "Step")
                        .WithMany("StepResults")
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("NextStep");

                    b.Navigation("Solution");

                    b.Navigation("Step");
                });

            modelBuilder.Entity("OMSys.Models.Symptom", b =>
                {
                    b.HasOne("OMSys.Models.Component", "Component")
                        .WithMany("Symptoms")
                        .HasForeignKey("ComponentId")
                        .IsRequired();

                    b.Navigation("Component");
                });

            modelBuilder.Entity("OMSys.Models.Component", b =>
                {
                    b.Navigation("Symptoms");
                });

            modelBuilder.Entity("OMSys.Models.DiagnosisStep", b =>
                {
                    b.Navigation("StepResults");
                });

            modelBuilder.Entity("OMSys.Models.Solution", b =>
                {
                    b.Navigation("StepResults");
                });

            modelBuilder.Entity("OMSys.Models.Symptom", b =>
                {
                    b.Navigation("DiagnosisSteps");

                    b.Navigation("Solutions");
                });

            modelBuilder.Entity("OMSys.Models.Unit", b =>
                {
                    b.Navigation("Components");
                });
#pragma warning restore 612, 618
        }
    }
}
